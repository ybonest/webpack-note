此例子共引用了两处知识点
### 1.使用webpack的插件(Plugins)配置
此例引入`html-webpack-plugin`插件
html-webpack-plugin它的作用就是把index.html页面，也托管到内存中，进一步增加网站在开发过程中，运行的速度；第二个作用：自动把打包好的bundle.js注入到页面中；

使用步骤
+ 安装:npm i html-webpack-plugin -D
+ 在webpack.config.js文件中导入`const HtmlWebpackPlugin = require('html-webpack-plugin')`
+ 增加配置将插件挂载到webpack中，配置如下：
```
module.exports = {
  entry:path.join(__dirname,'./src/index.js'),
  output:{
    path:path.join(__dirname,'./dist'),
    filename:'bundle.js'
  },
  plugins:[ //plugins专门配置webpack相关插件
    new HtmlWebpackPlugin({
      template:path.join(__dirname,'./src/index.html'), //制定要被托管的html文件以及其路径
      filename:'index.html' //指定要生成的页面的名称，也就是被托管到内存中的html文件，默认托管到根目录
    })
  ]
}
```

### 2.使用webpack的Loader
loader 用于对模块的源代码进行转换。loader 可以使你在 import 或"加载"模块时预处理文件。
loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。
loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！

本例中引入了处理css/scss/less以及引入图片时的loader
1. 转换css文件
  + 创建css样式文件，并在要打包的js文件中引入，本例中是在index.js中引入的css-->`import './css/a.css'`
  + 安装style-loader ---> `npm i style-loader -D`
  + 安装css-loader --->   `npm i css-loader -D`
  + 在webpack.config.js配置文件中的module节点中增加如下规则
  ```
  module.exports = {
    entry:path.join(__dirname,'./src/index.js'),
    output:{
      path:path.join(__dirname,'./dist'),
      filename:'bundle.js'
    },
    plugins:[ //plugins专门配置webpack相关插件
      new HtmlWebpackPlugin({
        template:path.join(__dirname,'./src/index.html'), //制定要被托管的html文件以及其路径
        filename:'index.html' //指定要生成的页面的名称，也就是被托管到内存中的html文件，默认托管到根目录
      })
    ],
    module:{  //配置第三方loader模块
      rules:[ //第三方文件后缀匹配规则以及loader，注意如果存在多个loader，loader调用顺序是从后向前
        {test:/\.css$/,use:['style-loader','css-loader']} //配置css文件loader   
      ]
    }
  }
  ```

2. 转换scss文件
  + 创建scss样式文件，并在要打包的js文件中引入，本例中是在index.js中引入的css-->`import './css/b.scss'`
  + 安装依赖loader
    - style-loader 执行命令 `npm i style-loader -D`
    - css-loader 执行命令 `npm i css-loader -D`
    - sass-loader 执行命令 `npm i sass-loader -D`
    - node-sass 执行命令 `npm i node-sass -D`
  + 在webpack.config.js配置文件中的module节点中增加如下规则
  ```
  module.exports = {
    entry:path.join(__dirname,'./src/index.js'),
    output:{
      path:path.join(__dirname,'./dist'),
      filename:'bundle.js'
    },
    plugins:[ //plugins专门配置webpack相关插件
      new HtmlWebpackPlugin({
        template:path.join(__dirname,'./src/index.html'), //制定要被托管的html文件以及其路径
        filename:'index.html' //指定要生成的页面的名称，也就是被托管到内存中的html文件，默认托管到根目录
      })
    ],
    module:{  //配置第三方loader模块
      rules:[ //第三方文件后缀匹配规则以及loader，注意如果存在多个loader，loader调用顺序是从后向前
        {test:/\.scss$/,use:['style-loader','css-loader','sass-loader']}
      ]
    }
  }
  ```

3. 转换less文件
  + 创建less样式文件，并在要打包的js文件中引入，本例中是在index.js中引入的css-->`import './css/b.scss'`
  + 安装依赖loader
    - style-loader 执行命令 `npm i style-loader -D`
    - css-loader 执行命令 `npm i css-loader -D`
    - sass-loader 执行命令 `npm i less-loader -D`
    - less 执行命令 `npm i less -D`
  + 在webpack.config.js配置文件中的module节点中增加如下规则
  ```
  module.exports = {
    entry:path.join(__dirname,'./src/index.js'),
    output:{
      path:path.join(__dirname,'./dist'),
      filename:'bundle.js'
    },
    plugins:[ //plugins专门配置webpack相关插件
      new HtmlWebpackPlugin({
        template:path.join(__dirname,'./src/index.html'), //制定要被托管的html文件以及其路径
        filename:'index.html' //指定要生成的页面的名称，也就是被托管到内存中的html文件，默认托管到根目录
      })
    ],
    module:{  //配置第三方loader模块
      rules:[ //第三方文件后缀匹配规则以及loader，注意如果存在多个loader，loader调用顺序是从后向前
        {test:/\.less$/,use:['style-loader','css-loader','less-loader']}
      ]
    }
  }
  ```

  4. 处理css路径问题
  + 此处主要引入url-loader和file-loader
  具体配置如下
  ```
  module.exports = {
    entry:path.join(__dirname,'./src/index.js'),
    output:{
      path:path.join(__dirname,'./dist'),
      filename:'bundle.js'
    },
    plugins:[ //plugins专门配置webpack相关插件
      new HtmlWebpackPlugin({
        template:path.join(__dirname,'./src/index.html'), //制定要被托管的html文件以及其路径
        filename:'index.html' //指定要生成的页面的名称，也就是被托管到内存中的html文件，默认托管到根目录
      })
    ],
    module:{  //配置第三方loader模块
      rules:[ //第三方文件后缀匹配规则以及loader，注意如果存在多个loader，loader调用顺序是从后向前
        {test:/\.css$/,use:['style-loader','css-loader']},  //配置css文件loader   
        //因为此处index以及bundle.js都是托管到内存中的，所以css加载图片时需要配置此项，否则npm run dev启动报错
        // {test:/\.jpg|png|gif|bmp$/,use:'url-loader'}  
        //默认情况下使用url-loader将把图片转为base64格式的图片，如果不想改变图片格式，可以下载file-loader，
        //增加limit限制,当limit限制小于图片大小时(右键图片，属性，查看图片大小---注意：图片大小指的是字节数)，
        //图片会以原本格式展现
        // {test:/\.jpg|png|gif|bmp$/,use:'url-loader?limit=5948'}  
        //经过以上两步后，图片正常显示，并且保持了原本格式，但是图片名称被改成了hash值，如果想保持图片原有名称
        //可以增加name限制 ---name=[name].[ext]代表原有的图片名称
        // {test:/\.jpg|png|gif|bmp$/,use:'url-loader?limit=5948&name=[name].[ext]'}
        //同时你也可以以hash值+原本名字配合使用 
        {test:/\.jpg|png|gif|bmp$/,use:'url-loader?limit=5948&name=[hash:8]-[name].[ext]'}
      ]
    }
  }
  ```